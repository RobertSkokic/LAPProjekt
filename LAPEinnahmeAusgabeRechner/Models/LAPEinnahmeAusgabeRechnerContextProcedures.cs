// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using LAPEinnahmeAusgabeRechner.Models;
using LAPEinnahmeAusgabeRechner.Models.dboSchema;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace LAPEinnahmeAusgabeRechner.Models
{
    public partial class LAPEinnahmeAusgabeRechnerContext
    {
        private ILAPEinnahmeAusgabeRechnerContextProcedures _procedures;

        public virtual ILAPEinnahmeAusgabeRechnerContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new LAPEinnahmeAusgabeRechnerContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ILAPEinnahmeAusgabeRechnerContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class LAPEinnahmeAusgabeRechnerContextProcedures : ILAPEinnahmeAusgabeRechnerContextProcedures
    {
        private readonly LAPEinnahmeAusgabeRechnerContext _context;

        public LAPEinnahmeAusgabeRechnerContextProcedures(LAPEinnahmeAusgabeRechnerContext context)
        {
            _context = context;
        }

        public virtual async Task<int> AusgabeDeleteAsync(long? AUSGABEID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AUSGABEID",
                    Value = AUSGABEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AusgabeDelete] @AUSGABEID = @AUSGABEID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AusgabeGetAllResult>> AusgabeGetAllAsync(short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AusgabeGetAllResult>("EXEC @returnValue = [dbo].[AusgabeGetAll] @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AusgabeGetByAusgabeIDResult>> AusgabeGetByAusgabeIDAsync(long? AUSGABEID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AUSGABEID",
                    Value = AUSGABEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AusgabeGetByAusgabeIDResult>("EXEC @returnValue = [dbo].[AusgabeGetByAusgabeID] @AUSGABEID = @AUSGABEID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AusgabeGetByKategorieIDResult>> AusgabeGetByKategorieIDAsync(long? KATEGORIEID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "KATEGORIEID",
                    Value = KATEGORIEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AusgabeGetByKategorieIDResult>("EXEC @returnValue = [dbo].[AusgabeGetByKategorieID] @KATEGORIEID = @KATEGORIEID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AusgabeInsertResult>> AusgabeInsertAsync(long? KATEGORIEID, string BESCHREIBUNG, decimal? BETRAG, DateTime? DATUM, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "KATEGORIEID",
                    Value = KATEGORIEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "BESCHREIBUNG",
                    Size = 200,
                    Value = BESCHREIBUNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BETRAG",
                    Precision = 18,
                    Scale = 2,
                    Value = BETRAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "DATUM",
                    Value = DATUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AusgabeInsertResult>("EXEC @returnValue = [dbo].[AusgabeInsert] @KATEGORIEID = @KATEGORIEID, @BESCHREIBUNG = @BESCHREIBUNG, @BETRAG = @BETRAG, @DATUM = @DATUM, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> AusgabeUpdateAsync(long? AUSGABEID, long? KATEGORIEID, string BESCHREIBUNG, decimal? BETRAG, DateTime? DATUM, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AUSGABEID",
                    Value = AUSGABEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "KATEGORIEID",
                    Value = KATEGORIEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "BESCHREIBUNG",
                    Size = 200,
                    Value = BESCHREIBUNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BETRAG",
                    Precision = 18,
                    Scale = 2,
                    Value = BETRAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "DATUM",
                    Value = DATUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AusgabeUpdate] @AUSGABEID = @AUSGABEID, @KATEGORIEID = @KATEGORIEID, @BESCHREIBUNG = @BESCHREIBUNG, @BETRAG = @BETRAG, @DATUM = @DATUM, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EinnahmeDeleteAsync(long? EINNAHMEID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EINNAHMEID",
                    Value = EINNAHMEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EinnahmeDelete] @EINNAHMEID = @EINNAHMEID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EinnahmeGetAllResult>> EinnahmeGetAllAsync(short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EinnahmeGetAllResult>("EXEC @returnValue = [dbo].[EinnahmeGetAll] @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EinnahmeGetByEinnahmeIDResult>> EinnahmeGetByEinnahmeIDAsync(long? EINNAHMEID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EINNAHMEID",
                    Value = EINNAHMEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EinnahmeGetByEinnahmeIDResult>("EXEC @returnValue = [dbo].[EinnahmeGetByEinnahmeID] @EINNAHMEID = @EINNAHMEID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EinnahmeGetByKategorieIDResult>> EinnahmeGetByKategorieIDAsync(long? KATEGORIEID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "KATEGORIEID",
                    Value = KATEGORIEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EinnahmeGetByKategorieIDResult>("EXEC @returnValue = [dbo].[EinnahmeGetByKategorieID] @KATEGORIEID = @KATEGORIEID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EinnahmeInsertResult>> EinnahmeInsertAsync(long? KATEGORIEID, string BESCHREIBUNG, decimal? BETRAG, DateTime? DATUM, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "KATEGORIEID",
                    Value = KATEGORIEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "BESCHREIBUNG",
                    Size = 200,
                    Value = BESCHREIBUNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BETRAG",
                    Precision = 18,
                    Scale = 2,
                    Value = BETRAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "DATUM",
                    Value = DATUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EinnahmeInsertResult>("EXEC @returnValue = [dbo].[EinnahmeInsert] @KATEGORIEID = @KATEGORIEID, @BESCHREIBUNG = @BESCHREIBUNG, @BETRAG = @BETRAG, @DATUM = @DATUM, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EinnahmeUpdateAsync(long? EINNAHMEID, long? KATEGORIEID, string BESCHREIBUNG, decimal? BETRAG, DateTime? DATUM, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EINNAHMEID",
                    Value = EINNAHMEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "KATEGORIEID",
                    Value = KATEGORIEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "BESCHREIBUNG",
                    Size = 200,
                    Value = BESCHREIBUNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BETRAG",
                    Precision = 18,
                    Scale = 2,
                    Value = BETRAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "DATUM",
                    Value = DATUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EinnahmeUpdate] @EINNAHMEID = @EINNAHMEID, @KATEGORIEID = @KATEGORIEID, @BESCHREIBUNG = @BESCHREIBUNG, @BETRAG = @BETRAG, @DATUM = @DATUM, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> KategorieDeleteAsync(long? KATEGORIEID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "KATEGORIEID",
                    Value = KATEGORIEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[KategorieDelete] @KATEGORIEID = @KATEGORIEID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<KategorieGetAllResult>> KategorieGetAllAsync(short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<KategorieGetAllResult>("EXEC @returnValue = [dbo].[KategorieGetAll] @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<KategorieGetByKategorieIDResult>> KategorieGetByKategorieIDAsync(long? KATEGORIEID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "KATEGORIEID",
                    Value = KATEGORIEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<KategorieGetByKategorieIDResult>("EXEC @returnValue = [dbo].[KategorieGetByKategorieID] @KATEGORIEID = @KATEGORIEID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<KategorieInsertResult>> KategorieInsertAsync(string BEZEICHNUNG, string FARBE, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BEZEICHNUNG",
                    Size = 100,
                    Value = BEZEICHNUNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FARBE",
                    Size = 7,
                    Value = FARBE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<KategorieInsertResult>("EXEC @returnValue = [dbo].[KategorieInsert] @BEZEICHNUNG = @BEZEICHNUNG, @FARBE = @FARBE, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> KategorieUpdateAsync(long? KATEGORIEID, string BEZEICHNUNG, string FARBE, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "KATEGORIEID",
                    Value = KATEGORIEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "BEZEICHNUNG",
                    Size = 100,
                    Value = BEZEICHNUNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FARBE",
                    Size = 7,
                    Value = FARBE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[KategorieUpdate] @KATEGORIEID = @KATEGORIEID, @BEZEICHNUNG = @BEZEICHNUNG, @FARBE = @FARBE, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
